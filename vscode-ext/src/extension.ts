import * as vscode from "vscode";
import { buildContainer } from "./buildContainer";
import { devcontainerMountName, displayName, files } from "./constants";
import { generateContainer } from "./generateContainer";
import { openContainer } from "./openContainer";
import { openWorkspace } from "./openWorkspace";
import {
  getChannel,
  getWorkspacePath,
  isInDevcontainer,
  pathExists,
  setChannel,
  waitForDevcontainerFinalized,
} from "./utils";

export const activate = async (context: vscode.ExtensionContext) => {
  /*
  Initializes the extension
  */

  setChannel(vscode.window.createOutputChannel(displayName));
  const channel = getChannel();

  channel.appendLine("initializing extension");

  channel.appendLine("setting contexts");
  const contexts = {
    isInDevcontainer: await isInDevcontainer(),
  };
  for (const [key, value] of Object.entries(contexts)) {
    const fullKey = `${displayName}.${key}`;
    vscode.commands.executeCommand("setContext", fullKey, value);
  }

  channel.appendLine("registering commands");
  const commands = {
    generateContainer,
    buildContainer,
    openContainer,
    openWorkspace,
  };
  for (const [name, command] of Object.entries(commands)) {
    const fullName = `${displayName}.${name}`;
    vscode.commands.registerCommand(fullName, command);
  }

  await maybeAutoOpenWorkspace();
};

export const deactivate = () => {};

const maybeAutoOpenWorkspace = async () => {
  /*
  Attempts to auto-open the code-workspace generated by devcontainer-utils as part of extension initialization
  */
  const channel = getChannel();

  channel.appendLine("trying to auto-open workspace");

  if (!(await isInDevcontainer())) {
    channel.appendLine("cannot auto-open workspace - is not in devcontainer");
    return;
  }
  if (vscode.workspace.workspaceFile) {
    channel.appendLine(
      `cannot auto-open workspace - is already in workspace ${vscode.workspace.workspaceFile}`
    );
    return;
  }
  const workspacePath = getWorkspacePath(
    devcontainerMountName,
    files.workspace
  );
  if (!(await pathExists(workspacePath))) {
    channel.appendLine(
      `cannot auto-open workspace - could not find workspace file ${workspacePath}`
    );
    return;
  }
  channel.appendLine(`waiting for devcontainer to finalize`);
  await waitForDevcontainerFinalized();

  channel.appendLine(`opening workspace ${workspacePath}`);
  await openWorkspace(vscode.Uri.file(workspacePath));
};
